name: E2E Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      supabase:
        image: supabase/supabase-dev:latest
        ports:
          - 54321:54321
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          DB_HOST: postgres
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASS: postgres
          DB_NAME: postgres
          JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
          ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
          SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for Postgres service to be ready
        run: |
          echo "Waiting for Postgres logs to show ready state..."
          for i in {1..60}; do
            if docker logs $(docker ps -q --filter "ancestor=postgres:15") 2>&1 | grep -q "database system is ready to accept connections"; then
              echo "Postgres is ready!"
              break
            fi
            echo "Waiting for Postgres... ($i/60)"
            sleep 3
          done
          if [ $i -eq 60 ]; then
            echo "ERROR: Postgres failed to become ready within 3 minutes"
            docker logs $(docker ps -q --filter "ancestor=postgres:15") 2>&1 || echo "Could not get Postgres logs"
            exit 1
          fi

      - name: Wait for Supabase service to be ready
        run: |
          echo "Waiting for Supabase to be ready..."
          for i in {1..60}; do
            if pg_isready -h localhost -p 54321 -U postgres; then
              echo "Supabase is ready!"
              break
            fi
            echo "Waiting for Supabase... ($i/60)"
            sleep 3
          done
          if [ $i -eq 60 ]; then
            echo "ERROR: Supabase failed to become ready within 3 minutes"
            docker logs $(docker ps -q --filter "ancestor=supabase/supabase-dev:latest") 2>&1 || echo "Could not get Supabase logs"
            exit 1
          fi

      - name: Setup test database schema
        run: |
          echo "Setting up test database schema..."
          PGPASSWORD=postgres psql -h localhost -p 54321 -U postgres -d postgres -f database/test-schema.sql

      - name: Verify database setup
        run: |
          echo "Verifying database setup..."
          curl -X POST http://localhost:54321/rest/v1/rpc/exec \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU" \
            -d '{"sql": "SELECT COUNT(*) as scenarios FROM scenarios; SELECT COUNT(*) as response_cards FROM response_cards;"}'

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run unit tests
        run: npm run test

      - name: Run TypeScript checks
        run: npm run typecheck

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          if-no-files-found: ignore