name: E2E Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase (optimized for CI)
        run: supabase start -x vector,imgproxy,studio,edge-runtime

      - name: Export Supabase environment variables
        run: |
          set -euo pipefail
          supabase status -o env > supa.env
          # Extract environment variables from CLI output
          API_URL=$(grep '^API_URL=' supa.env | cut -d= -f2- | tr -d '"')
          ANON_KEY=$(grep '^ANON_KEY=' supa.env | cut -d= -f2- | tr -d '"')
          SERVICE_ROLE_KEY=$(grep '^SERVICE_ROLE_KEY=' supa.env | cut -d= -f2- | tr -d '"')
          DB_URL=$(grep '^DB_URL=' supa.env | cut -d= -f2- | tr -d '"')
          
          # Export for subsequent steps
          echo "SUPABASE_URL=$API_URL" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_URL=$API_URL" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY" >> $GITHUB_ENV
          echo "DB_URL=$DB_URL" >> $GITHUB_ENV
          
          echo "Exported Supabase environment:"
          echo "  API_URL: $API_URL"
          echo "  ANON_KEY: ${ANON_KEY:0:20}..."
          echo "  SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY:0:20}..."
          echo "  DB_URL: ${DB_URL:0:30}..."

      - name: Wait for Kong→Auth health
        run: |
          set -euo pipefail
          echo "Waiting for $NEXT_PUBLIC_SUPABASE_URL/auth/v1/health ..."
          for i in {1..180}; do
            if curl -fsS "$NEXT_PUBLIC_SUPABASE_URL/auth/v1/health" >/dev/null; then
              echo "Kong→Auth healthy (attempt $i)"; break
            fi
            echo "Waiting for Kong→Auth... ($i/180)"
            sleep 2
          done
          if [ $i -eq 180 ]; then
            echo "ERROR: Kong→Auth failed to become ready within 6 minutes"
            echo "Debug: Attempting to curl auth endpoint..."
            curl -v "$NEXT_PUBLIC_SUPABASE_URL/auth/v1/health" || true
            exit 1
          fi

      - name: Verify Postgres logical replication
        run: |
          echo "Verifying Postgres logical replication configuration..."
          WAL_LEVEL=$(echo "SHOW wal_level;" | psql "$DB_URL" -t)
          echo "Current wal_level: $WAL_LEVEL"
          if [[ "$WAL_LEVEL" =~ logical ]]; then
            echo "✅ Logical replication is properly configured"
          else
            echo "❌ ERROR: wal_level is '$WAL_LEVEL', expected 'logical'"
            echo "This will cause Realtime to fail"
            exit 1
          fi

      - name: Setup test database schema
        run: |
          echo "Setting up test database schema..."
          psql "$DB_URL" -f database/test-schema.sql

      - name: Verify database setup
        run: |
          echo "Verifying database setup..."
          # Use direct SQL query via psql for more reliable verification
          psql "$DB_URL" -c "SELECT COUNT(*) as scenarios FROM scenarios;"
          psql "$DB_URL" -c "SELECT COUNT(*) as response_cards FROM response_cards;"
          echo "✅ Database schema loaded and verified successfully"

      - name: Realtime readiness smoke test
        run: node scripts/realtime-smoketest.mjs

      - name: Build application
        run: npm run build

      - name: Run Jest tests (unit + integration)
        run: npm run test

      - name: Run TypeScript checks
        run: npm run typecheck

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Stop Supabase
        if: always()
        run: supabase stop

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          if-no-files-found: ignore